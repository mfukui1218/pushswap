導入
以下のルールを遵守してください。

- 評価プロセス全体を通じて、礼儀正しく、丁寧で、敬意を持って、建設的な態度
を保ってください。コミュニティの幸福はこれにかかっています。

- 評価対象の学生またはグループとともに
、プロジェクトの機能不全の可能性を特定してください
。特定された可能性のある問題について時間をかけて話し合い、議論してください。 - プロジェクトの指示と機能の範囲に対する

同僚の理解には、多少の違いがある可能性があることを考慮する必要があります 。常に偏見を持た ず、できるだけ正直に評価してください。この教育法は、同僚による評価が真剣に行われた場合にのみ役立ちます 。





ガイドライン

- 評価対象の学生またはグループ の Git リポジトリに提出された作業のみを採点します。

- Git リポジトリが学生のものであることを再確認します。
プロジェクトが期待どおりのものであることを確認します。また、「git clone」が
空のフォルダーで使用されていることを確認します。

- 悪意のあるエイリアスが使用されていないことを慎重に確認し、
公式リポジトリの内容ではないものを評価させます。

- 驚きを避けるために、該当する場合は、
採点を容易にするために使用されるスクリプト (テストまたは自動化用のスクリプト) を一緒に確認します。

- 評価する課題を完了していない場合は、
評価プロセスを開始する前に、主題全体を読む必要があります。

- 使用可能なフラグを使用して、空のリポジトリ、機能しない
プログラム、Norm エラー、不正行為などを報告します。
これらの場合、評価プロセスは終了し、最終成績は 0 になります
。不正行為の場合は -42 になります。ただし、不正行為を除き、学生は
提出された作業を一緒に確認し、
将来繰り返さないようにする間違いを特定することを強くお勧めします。 - メモリ リークがないことも確認する必要があります。 ヒープ

に割り当てられたメモリは、実行が終了する前に適切に解放する必要があります。leaks、valgrind、e_fence など、 コンピューターで使用できるさまざまなツールを使用できます 。メモリ リークがある場合は、 適切なフラグをオンにします。





添付ファイル
 件名.pdf  チェッカー_Mac  チェッカーLinux
必須部分
注意: 防御中は、セグメント違反や、その他の予期しない、時期尚早な、制御不能な、または予期しないプログラムの終了が発生しないことを覚えておいてください。そうでない場合は、最終成績は 0 になります。適切なフラグを使用してください。このルールは、防御全体を通じて有効です。

メモリリーク

防御全体を通して、
push_swap によって使用されるメモリの量に注意し (たとえば、top コマンドを使用)、
異常を検出し、割り当てられたメモリが
適切に解放されていることを確認します。メモリ リークが 1 つ (または複数) ある場合、最終
評価は 0 になります。

エラー管理

このセクションでは、push_swap のエラー管理を評価します。
少なくとも 1 つが失敗すると、この
セクションではポイントは付与されません。次のセクションに進みます。

数値以外のパラメータを使用して push_swap を実行します。プログラムは
標準エラーに「Error」とそれに続く '\n' を表示する必要があります。

重複した数値パラメータを使用して push_swap を実行します。プログラムは
標準エラーに「エラー」とそれに続く '\n' を表示する必要があります。

MAXINTより大きい数値パラメータのみを使用して push_swap を実行します
。プログラムは
標準エラーに「Error」とそれに続く '\n' を表示する必要があります。

パラメータなしで push_swap を実行します。プログラムは
何も表示せず、プロンプトを返す必要があります。

Push_swap - アイデンティティテスト


このセクションでは、すでにソートされたリストが与えられた場合の push_swap の動作を評価します。次の 3 つの
テストを実行します。少なくとも 1 つが失敗すると、このセクションのポイントは付与されません
。次のセクションに進みます。

次のコマンド「$>./push_swap 42」を実行します。プログラムは
何も表示しません (0 命令)。

次のコマンド「$>./push_swap 2 3」を実行します。
プログラムは何も表示しません（0命令）。

次のコマンド「$>./push_swap 0 1 2 3」を実行します。
プログラムは何も表示しません (0 命令)。

次のコマンド「$>./push_swap 0 1 2 3 4 5 6 7 8
9」を実行します。プログラムは何も表示しません (0 命令)。

次のコマンド「$>./push_swap '0 から 9 の間でランダムに
ソートされた値を選択>'」を実行します。プログラムは何も表示しません
(0 命令)。

Push_swap - シンプルバージョン

次のテストに失敗した場合、このセクションのポイントは付与されません
。次のテストに進んでください。
添付ファイルにあるチェッカー バイナリを使用してください。

「$>ARG="2 1 0"; ./push_swap $ARG | ./checker_OS $ARG」を実行します。
チェッカー プログラムに「OK」と表示され、
push_swap からの命令リストのサイズが 2 または 3 であることを確認します。
それ以外の場合、テストは失敗します。

「$>ARG="'0 から 3 までのランダムな値が選択されます'"; ./push_swap
$ARG | ./checker_OS $ARG" を実行します。チェッカー プログラムに
「OK」と表示され、push_swap からの命令リストのサイズが
0 から 3 の間であることを確認します。それ以外の場合、テストは失敗します。

もう一つのシンプルなバージョン

次の 2 つのテストを実行します。少なくとも 1 つが失敗すると、
このセクションのポイントは付与されません。次のセクションに進みます。
添付ファイルに付属のチェッカー バイナリを使用します。

「$>ARG="1 5 2 4 3"; ./push_swap $ARG | ./checker_OS $ARG」を実行します。
チェッカー プログラムに「OK」と表示され、
push_swap からの命令リストのサイズが
12 を超えていないことを確認します。命令リストのサイズが 8 であれば成功です。

「$>ARG="<5 つのランダムな値>"; ./push_swap $ARG | ./checker_OS
$ARG」を実行し、プレースホルダーを 5 つのランダムな有効な値に置き換えます。
チェッカー プログラムに「OK」と表示され、
push_swap からの命令リストのサイズが 12 を超えていないことを確認します。そうでない場合、このテストは失敗します。 プログラムが このスケールに含まれるテストにのみ正しく回答するように開発されていないことを特に確認する
必要があります 。検証する前に、 いくつかの組み合わせでこのテストを数回繰り返す必要があります。




Push_swap - 中間バージョン

次のテストに失敗した場合、このセクションのポイントは付与されません
。次のテストに進みます。次のテストに進みます。
添付ファイルに記載されているチェッカー バイナリを使用します。

「$>ARG="<100 個のランダムな値>"; ./push_swap $ARG | ./checker_OS $ARG」を実行し、プレースホルダーを 100 個のランダムな有効な値に置き換えます。チェッカー プログラムに「OK」と表示され、命令リストのサイズが正しいことを確認します。次の基準に従ってポイントを付与します。
700未満: 5
900未満: 4
1100未満: 3
1300未満: 2
1500 未満: 1 プログラムがこのスケールに含まれるテストに正しく答えるためにのみ開発されていないことを特に確認する必要があります。検証する前に、いくつかの組み合わせでこのテストを数回繰り返す必要があります。
0（不合格）から5（優秀）まで評価してください

Push_swap - 上級バージョン

次のテストに失敗した場合、このセクションのポイントは付与されません
。次のテストに進みます。次のテストに進みます。
添付ファイルに記載されているチェッカー バイナリを使用します。

「$>ARG="<500 random values>"; ./push_swap $ARG | ./checker_OS $ARG」を実行し、プレースホルダーを500個のランダムな有効な値に置き換えます（John/Jane Scriptと呼ばれるのも無理はありません）。チェッカープログラムに「OK」と表示され、命令リストのサイズが正しいことを確認します。
5500未満: 5
7000未満: 4
8500未満: 3
10000未満: 2
11500 未満: 1 プログラムがこのスケールに含まれるテストに正しく答えるためにのみ開発されていないことを特に確認する必要があります。検証する前に、いくつかの組み合わせでこのテストを数回繰り返す必要があります。

https://www.42evals.com/